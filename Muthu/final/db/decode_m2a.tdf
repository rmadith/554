--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 22.1 cbx_cycloneii 2023:02:14:18:07:11:SC cbx_lpm_add_sub 2023:02:14:18:07:10:SC cbx_lpm_compare 2023:02:14:18:07:10:SC cbx_lpm_decode 2023:02:14:18:07:10:SC cbx_mgl 2023:02:14:18:07:18:SC cbx_nadder 2023:02:14:18:07:11:SC cbx_stratix 2023:02:14:18:07:11:SC cbx_stratixii 2023:02:14:18:07:11:SC  VERSION_END


-- Copyright (C) 2023  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_m2a
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode426w[3..0]	: WIRE;
	w_anode443w[3..0]	: WIRE;
	w_anode453w[3..0]	: WIRE;
	w_anode463w[3..0]	: WIRE;
	w_anode473w[3..0]	: WIRE;
	w_anode483w[3..0]	: WIRE;
	w_anode493w[3..0]	: WIRE;
	w_anode503w[3..0]	: WIRE;
	w_anode513w[3..0]	: WIRE;
	w_anode524w[3..0]	: WIRE;
	w_anode534w[3..0]	: WIRE;
	w_anode544w[3..0]	: WIRE;
	w_anode554w[3..0]	: WIRE;
	w_anode564w[3..0]	: WIRE;
	w_anode574w[3..0]	: WIRE;
	w_anode584w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode503w[3..3], w_anode493w[3..3], w_anode483w[3..3], w_anode473w[3..3], w_anode463w[3..3], w_anode453w[3..3], w_anode443w[3..3], w_anode426w[3..3]);
	eq_wire2w[] = ( w_anode584w[3..3], w_anode574w[3..3], w_anode564w[3..3], w_anode554w[3..3], w_anode544w[3..3], w_anode534w[3..3], w_anode524w[3..3], w_anode513w[3..3]);
	w_anode426w[] = ( (w_anode426w[2..2] & (! data_wire[2..2])), (w_anode426w[1..1] & (! data_wire[1..1])), (w_anode426w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode443w[] = ( (w_anode443w[2..2] & (! data_wire[2..2])), (w_anode443w[1..1] & (! data_wire[1..1])), (w_anode443w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode453w[] = ( (w_anode453w[2..2] & (! data_wire[2..2])), (w_anode453w[1..1] & data_wire[1..1]), (w_anode453w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode463w[] = ( (w_anode463w[2..2] & (! data_wire[2..2])), (w_anode463w[1..1] & data_wire[1..1]), (w_anode463w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode473w[] = ( (w_anode473w[2..2] & data_wire[2..2]), (w_anode473w[1..1] & (! data_wire[1..1])), (w_anode473w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode483w[] = ( (w_anode483w[2..2] & data_wire[2..2]), (w_anode483w[1..1] & (! data_wire[1..1])), (w_anode483w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode493w[] = ( (w_anode493w[2..2] & data_wire[2..2]), (w_anode493w[1..1] & data_wire[1..1]), (w_anode493w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode503w[] = ( (w_anode503w[2..2] & data_wire[2..2]), (w_anode503w[1..1] & data_wire[1..1]), (w_anode503w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode513w[] = ( (w_anode513w[2..2] & (! data_wire[2..2])), (w_anode513w[1..1] & (! data_wire[1..1])), (w_anode513w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode524w[] = ( (w_anode524w[2..2] & (! data_wire[2..2])), (w_anode524w[1..1] & (! data_wire[1..1])), (w_anode524w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode534w[] = ( (w_anode534w[2..2] & (! data_wire[2..2])), (w_anode534w[1..1] & data_wire[1..1]), (w_anode534w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode544w[] = ( (w_anode544w[2..2] & (! data_wire[2..2])), (w_anode544w[1..1] & data_wire[1..1]), (w_anode544w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode554w[] = ( (w_anode554w[2..2] & data_wire[2..2]), (w_anode554w[1..1] & (! data_wire[1..1])), (w_anode554w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode564w[] = ( (w_anode564w[2..2] & data_wire[2..2]), (w_anode564w[1..1] & (! data_wire[1..1])), (w_anode564w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode574w[] = ( (w_anode574w[2..2] & data_wire[2..2]), (w_anode574w[1..1] & data_wire[1..1]), (w_anode574w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode584w[] = ( (w_anode584w[2..2] & data_wire[2..2]), (w_anode584w[1..1] & data_wire[1..1]), (w_anode584w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
