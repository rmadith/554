module bootloader(clk, rst_n, RX, TX, in_data, out_data, debug, write_to_UART, in_debug);

input clk, rst_n, RX, TX
input [15:0] in_data;			// data to UART
output [15:0] out_data;			// data from uart 
input debug;				// Debug (Self explanatory)
input write_to_UART;			// Write signal to send to UART
output in_debug; 			// Indicate that the write of 32 bits is done

typedef enum reg[1:0] {IDLE, LOW, HIGH} send_byte;
send_byte send_state, nxt_send_state;

wire rx_rdy;
wire [15:0] tx_data;
reg [15:0] stored_tx_data;
reg [7:0] send_tx_data;

reg trmt, store;

circular_queue iTxQueue(.clk(clk),.rst_n(rst_n),.data_in(in_data),.add(write_to_UART),.remove(store),.data_out(tx_data),.q_full(tx_q_full),.q_empty(tx_q_empty), .remaining(), .containing());



UART iUART(.clk(clk),.rst_n(rst_n),.RX(RX),.TX(TX),.rx_rdy(rx_rdy),.clr_rx_rdy(),.rx_data(rx_data),.trmt(),.tx_data(send_tx_data),.tx_done(tx_done), .baud('h1b2))


always_ff @(posedge clk, negedge rst_n)
    if(!rst_n)
	stored_tx_data = 'b0;
    else if(store)
	stored_tx_data = tx_data;

always_ff @(posedge clk, negedge rst_n)
    if(!rst_n)
	send_state = LOW;
    else
	send_state = nxt_send_state;

always_comb begin
   trmt = 0;
   store = 0;
   nxt_send_state = send_state;
   case(send_state)
	default: if(!tx_q_empty) begin
			store = 1;
			send_tx_data = tx_data[]


    endcase

   


endmodule
