
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module CPU1(

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK,

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire debug_sig, rst_n;
wire [31:0] data_cpu, waddr_cpu, waddr_cpu_bootloader, data_cpu_bootloader;

// I know this can be simpler but my brain is not working at 04/16/2023
// Holding the debug state
typedef enum reg {IDLE, DEBUG} state_t;
state_t state, nxt_state;

always_ff @(posedge clk, negedge rst_n)
	if(!rst_n)
		state <= IDLE;
	else
		state <= nxt_state;
		
always_comb begin
	nxt_state = state;
	case(state)
		default: if(debug_sig) nxt_state <= DEBUG;
		DEBUG: if(debug_sig) nxt_state <= IDLE;
	endcase
end
////////////////////////////////////////////////////////////////////





//=======================================================
//  Structural coding
//=======================================================

// Debug outputs
assign LEDR[8] = rst_n;
assign LEDR[7] = state;

// Debouncing Keys
reset_synch irst(.RST_n(KEY[0]), .clk(CLOCK2_50), .rst_n(rst_n), .pll_locked(1'b1));
reset_synch idebug(.RST_n(KEY[1]), .clk(CLOCK2_50), .rst_n(debug_sig), .pll_locked(1'b1));

// Bootloader
bootloader iBoot(.clk(CLOCK2_50), .rst_n(rst_n), .debug(state), .addr(waddr_cpu), .data(data_cpu), .increment(LEDR[6]), .RX(), .TX(), .outdata(), .write());


// CPU
cpu iCPU(.clk(CLOCK2_50), .rst_n(rst_n), .debug(state), .data_cpu(data_cpu), .waddr_cpu(waddr_cpu), .waddr_out(), .data_out(), .halt(LEDR[9]));





endmodule
